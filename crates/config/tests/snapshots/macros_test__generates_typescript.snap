---
source: crates/config/tests/macros_test.rs
expression: "std::fs::read_to_string(&file).unwrap()"
---
// Automatically generated by schematic. DO NOT MODIFY!

/* eslint-disable */

export type SomeEnum = 'a' | 'b' | 'c';

export type BasicEnum = 'foo' | 'bar' | 'baz';

export type CustomFormatEnum = 'FOO' | 'bAr' | 'b-a-z';

export type OtherEnum = 'foo' | 'bar' | 'baz';

export type AliasedEnum = 'foo' | 'bar' | 'baz';

export interface ValueTypes {
	boolean: boolean;
	string: string;
	number: number;
	vector: string[];
	map: Record<string, number>;
	enums: SomeEnum;
}

export interface OptionalValues {
	required: boolean;
	optional: string | null;
}

export interface DefaultValues {
	boolean: boolean;
	booleanFn: boolean;
	string: string;
	stringFn: string;
	fileString: string;
	longString: string;
	pathString: string;
	number: number;
	array: number[];
	tuple: [number, number, number, number];
	vector: number[];
	enums: SomeEnum;
}

export interface Serde {
	renamed: string;
}

export interface SerdeNative {
	renamed: string;
}

export interface Merging {
	basic: string;
}

export interface ExtendsString {
	extends: string;
}

export interface ExtendsList {
	extends: string[];
}

export interface ExtendsEnum {
	extends: string | string[];
}

export interface ExtendsOptional {
	extends: string[] | null;
}

export interface EnvVars {
	basic: string;
	advanced: string[];
}

export interface NestedValidations {
	basic: string;
}

export interface Validations {
	basic: string;
	optional: string | null;
	nested: NestedValidations;
	nested2: NestedValidations | null;
}

export interface Comments {
	normal: boolean;
	// Docs
	docs: boolean;
	inlineBlock: boolean;
	/**
	 * Block
	 */
	block: boolean;
}

export interface PartialDefaultValues {
	boolean?: boolean | null;
	booleanFn?: boolean | null;
	string?: string | null;
	stringFn?: string | null;
	fileString?: string | null;
	longString?: string | null;
	pathString?: string | null;
	number?: number | null;
	array?: number[] | null;
	tuple?: [number, number, number, number] | null;
	vector?: number[] | null;
	enums?: SomeEnum | null;
}

export interface PartialValueTypes {
	boolean?: boolean | null;
	string?: string | null;
	number?: number | null;
	vector?: string[] | null;
	map?: Record<string, number> | null;
	enums?: SomeEnum | null;
}

export interface PartialNested {
	one?: PartialValueTypes | null;
	two?: PartialValueTypes | null;
	list?: PartialValueTypes[] | null;
	map?: Record<string, PartialValueTypes> | null;
	map2?: Record<string, PartialValueTypes> | null;
}

export interface PartialNestedValidations {
	basic?: string | null;
}

export interface PartialValidations {
	basic?: string | null;
	optional?: string | null;
	nested?: PartialNestedValidations | null;
	nested2?: PartialNestedValidations | null;
}

